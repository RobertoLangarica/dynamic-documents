name: Backend-DEPLOY

# Trigger on push filter by branch
on:
  push:
    branches:
      - release_back
      - staging_back
jobs:
  # test:
  #   # Containers must run in Linux based operating systems
  #   runs-on: ubuntu-latest

  #   # Service containers to run with `container-job`
  #   services:
  #     postgres:
  #       image: postgres:11.8
  #       env:
  #         POSTGRES_PASSWORD: admin
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         # Maps tcp port 5432 on service container to the host
  #         - 5432:5432
  #   steps:
  #     - name: Checkout last version
  #       uses: actions/checkout@v2

  #     # Performs a clean installation of all dependencies in the `package.json` file
  #     # For more information, see https://docs.npmjs.com/cli/ci.html
  #     - name: Install dependencies
  #       working-directory: ./backend
  #       run: npm ci

  #     - name: Create test database
  #       working-directory: ./backend/test
  #       run: ./init_test_db.sh

  #     - name: Run tests
  #       working-directory: ./backend
  #       run: npm run test:e2e

  build:
    needs: migration
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    env:
      SERVER: fid@68.183.171.182

    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: "12.x"

      # Setting the stage based on the branch
      - name: Set stage
        run: |
          BRANCH=$(echo $GITHUB_REF | rev | cut -d "/" -f 1 | rev) \
          && echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      # RELEASE values
      - name: Release values
        run: |
          echo "REMOTE_DIR=~/dd/production" >> $GITHUB_ENV \
          && echo "PROCESS_NAME=DD_production" >> $GITHUB_ENV
        if: env.BRANCH == 'release_back'
      # STAGING values
      - name: Staging values
        run: |
          echo "REMOTE_DIR=~/dd/staging" >> $GITHUB_ENV \
          && echo "PROCESS_NAME=DD_staging" >> $GITHUB_ENV
        if: env.BRANCH == 'staging_back'

      - name: Adding SSH basics
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          mkdir ~/.ssh
          echo > ~/.ssh/known_hosts
          ssh-keyscan 68.183.171.182 > ~/.ssh/known_hosts

      - name: Deleting last build on the remote server
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          ssh "$SERVER" \
          "cd "$REMOTE_DIR"/backend && \
          yes | rm -r dist"

      - name: Checkout last project version
        uses: actions/checkout@v2

      - name: Recover npm cache
        uses: actions/cache@v1
        with:
          path: ./backend/node_modules
          key: ${{ hashFiles('backend/package.json') }}

      - name: Install npm dependencies
        working-directory: ./backend
        run: npm install

      - name: Build latest version
        working-directory: ./backend
        run: npm run build

      - name: Sending new build to the remote server
        working-directory: ./backend
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          scp -r ./dist "$SERVER":"$REMOTE_DIR"/backend/dist

      - name: Restart pm2
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          ssh "$SERVER" \
          "pm2 restart "$PROCESS_NAME""

  migration:
    # needs: test
    runs-on: ubuntu-latest
    env:
      SERVER: fid@68.183.171.182
    steps:
      # Setting the stage based on the branch
      - name: Set stage
        run: |
          BRANCH=$(echo $GITHUB_REF | rev | cut -d "/" -f 1 | rev) \
          && echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      # RELEASE values
      - name: Release values
        run: |
          echo "REMOTE_DIR=~/dd/production" >> $GITHUB_ENV \
          && echo "PROCESS_NAME=DD_production" >> $GITHUB_ENV
        if: env.BRANCH == 'release_back'
      # STAGING values
      - name: Staging values
        run: |
          echo "REMOTE_DIR=~/dd/staging" >> $GITHUB_ENV \
          && echo "PROCESS_NAME=DD_staging" >> $GITHUB_ENV
        if: env.BRANCH == 'staging_back'

      - name: Checkout last project version
        uses: actions/checkout@v2

      - name: Adding SSH basics
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          mkdir ~/.ssh
          echo > ~/.ssh/known_hosts
          ssh-keyscan 68.183.171.182 > ~/.ssh/known_hosts

      - name: Getting last repo version on the remote server
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          ssh "$SERVER" \
          "cd "$REMOTE_DIR" && \
          git fetch && \
          git checkout origin/"$BRANCH""

      - name: Installing production dependencies on remote server
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          ssh "$SERVER" \
          "cd "$REMOTE_DIR"/backend && npm install --only=prod"
      
      - name: Installing development dependencies on remote server
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          ssh "$SERVER" \
          "cd "$REMOTE_DIR"/backend && npm install --only=dev"

      - name: Run DB migrations on remote server
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{secrets.DO_KEY}}"
          ssh "$SERVER" \
          "cd "$REMOTE_DIR"/backend && npm run migration:run"
